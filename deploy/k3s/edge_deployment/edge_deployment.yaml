# Required runtime class for GPU use in k3s
apiVersion: node.k8s.io/v1
kind: RuntimeClass
metadata:
  name: nvidia
handler: nvidia
---
apiVersion: v1
kind: Service
metadata:
  name: edge-endpoint-service
spec:
  selector:
    app: edge-logic-server
  ports:
  - protocol: TCP
    # Service port for NGINX
    port: 6717
    nodePort: 30101
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: edge-endpoint
  labels:
    app: edge-endpoint
spec:
  replicas: 1
  selector:
    matchLabels:
      app: edge-logic-server
  template:
    metadata:
      labels:
        app: edge-logic-server
    spec:
      # This service account is used by the edge logic to access the Kubernetes API
      # from within the pod. See deploy/k3s/service_account.yaml for more details
      serviceAccountName: edge-endpoint-service-account
      initContainers:
      - name: database-prep
        image: 767397850842.dkr.ecr.us-west-2.amazonaws.com/edge-endpoint-test:latest
        imagePullPolicy: IfNotPresent
        env:
        # Flag to indicate whether or not to reset all database tables. Resetting WILL delete
        # all existing data in the database, so set this flag to 1 with caution.
        - name: DB_RESET
          valueFrom:
            configMapKeyRef:
              name: db-reset
              key: DB_RESET
        volumeMounts:
        - name: edge-endpoint-persistent-volume
          mountPath: /opt/groundlight/edge/sqlite
        - name: sqlite-db-setup-script-volume
          mountPath: /scripts
        command: ["/bin/bash", "/scripts/setup_db.sh"]

      containers:
      - name: edge-endpoint
        image: 767397850842.dkr.ecr.us-west-2.amazonaws.com/edge-endpoint-test:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 6717
        env:
        - name: LOG_LEVEL
          value: "INFO"
        # We need this feature flag since we run the edge logic server in two separate environments:
        # 1. In docker (on the GitHub Actions runner) for testing
        # 2. In kubernetes (currently a dedicated EC2 instance)
        # This feature flag is basically good for knowing when to use the python kubernetes API
        # (i.e., creating deployments, etc.). We don't want to use the python kubernetes API
        # if we are only running the edge logic server in docker.
        # TODO: Once we have kubernetes-based tests, we can remove this feature flag.
        - name: DEPLOY_DETECTOR_LEVEL_INFERENCE
          value: "1"
        # When EDGE_ONLY is set to 1, requests to the edge endpoint will only return the edge model's answer, regardless
        # of the confidence.
        - name: EDGE_ONLY
          value: "0" # disabled by default
        volumeMounts:
        - name: edge-config-volume
          mountPath: /etc/groundlight/edge-config

        - name: edge-endpoint-persistent-volume
          mountPath: /opt/groundlight/edge/sqlite

      - name: inference-model-updater
        image: 767397850842.dkr.ecr.us-west-2.amazonaws.com/edge-endpoint-test:latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash", "-c"]
        args: ["poetry run python -m app.model_updater.update_models"]
        env:
        - name: LOG_LEVEL
          value: "INFO"
        - name: DEPLOY_DETECTOR_LEVEL_INFERENCE
          value: "1"
        - name: GROUNDLIGHT_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: groundlight-api-token
              key: GROUNDLIGHT_API_TOKEN
              optional: true
        volumeMounts:
        - name: edge-config-volume
          mountPath: /etc/groundlight/edge-config

        - name: kubernetes-namespace
          mountPath: /etc/groundlight/kubernetes-namespace

        - name: inference-deployment-template-volume
          mountPath: /etc/groundlight/inference-deployment

        # In this setup the edge-endpoint-persistent-volume is mounted to
        # two different paths in the inference-model-updater container.
        # This allows the container to access both the sqlite database and
        # the path to the model repository without needing to create an extra PV and PVC.
        - name: edge-endpoint-persistent-volume
          mountPath: /opt/groundlight/edge/sqlite

        - name: edge-endpoint-persistent-volume
          mountPath: /opt/groundlight/edge/serving/model-repo

      imagePullSecrets:
      - name: registry-credentials

      volumes:
      - name: edge-config-volume
        configMap:
          name: edge-config
      - name: kubernetes-namespace
        configMap:
          name: kubernetes-namespace
      - name: inference-deployment-template-volume
        configMap:
          name: inference-deployment-template
      - name: sqlite-db-setup-script-volume
        configMap:
          name: setup-db
      - name: edge-endpoint-persistent-volume
        persistentVolumeClaim:
          claimName: edge-endpoint-pvc