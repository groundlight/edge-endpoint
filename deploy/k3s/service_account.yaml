
# To securely interact with the Kubernetes API from within a pod, 
# Kubernetes uses a system called Role-Based Access Control (RBAC). 
# When the Kubernetes Python client inside any pod tries to access 
# the Kubernetes API, it needs to get auntheticated and authorized 
# to access Kubernetes resources inside the cluster.
# Specifying a service account and a cluster role with full access
# to all resources in the cluster is the simplest way to do this.
# (i.e., any pod using the `edge-endpoint-service-account` will have
# full access to all resources in the cluster.)

# For more on RBAC, see:
# https://kubernetes.io/docs/reference/access-authn-authz/rbac/

apiVersion: v1
kind: ServiceAccount
metadata:
  name: edge-endpoint-service-account
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: full-access-cluster-role
rules:
# Grant full access to all resources in the cluster
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
# Assigns the full-access-cluster-role to the edge-endpoint-service-account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: edge-endpoint-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: edge-endpoint-service-account
  namespace: default
roleRef:
  kind: ClusterRole
  name: full-access-cluster-role
  apiGroup: rbac.authorization.k8s.io