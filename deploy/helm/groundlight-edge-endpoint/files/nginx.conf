events {
    worker_connections 256;
}

http {
    # Add "NGINX: " prefix to the log entries to distinguish them from other logs.
    # Follows NGINX's default "combined" log format.
    log_format custom_combined 'NGINX: $remote_addr - $remote_user [$time_local] "$request" '
                               '$status $body_bytes_sent "$http_referer" '
                               '"$http_user_agent"';

    access_log /var/log/nginx/access.log custom_combined;

    server {
        listen 30101;
        client_max_body_size 10M;   # a bit more than enough for a large json of a 14MP image

        location = / {  # Exact match for root URL only
            return 302 $scheme://$host:$server_port/status;
        }

        location /status {
            proxy_pass http://localhost:8123;  # status-monitor container
        }

        location / {  # all other requests
            proxy_pass http://localhost:6718;

            # If local edge server is not up or can't handle the query arguments,
            # then fallback to the cloud API server.
            # 422  - Unprocessable Entity
            # 404  - Not Found
            proxy_intercept_errors on;
            error_page 404 422 405 = @fallback;
        }

        location @fallback {
            # We need to explicitly set the resolver to the default name server for this Kubernetes
            # cluster and put the fallback server in a variable to get nginx to re-resolve it regularly.
            # This is important when going to an AWS ELB because the IPs change.
            resolver __NAME_SERVER__ valid=30s;
            {{- $parsedURL := .Values.upstreamEndpoint | urlParse }}
            set $upstreamEndpoint {{  index $parsedURL "scheme" }}://{{ index $parsedURL "host" }};

            # Fallback to the cloud API server
            proxy_pass $upstreamEndpoint;

            # Ensure correct SNI/Host to upstream
            proxy_ssl_server_name on;                 # send SNI
            proxy_ssl_name $upstreamEndpoint;         # (explicit; optional if using $proxy_host)
            proxy_set_header Host $proxy_host;        # or: proxy_set_header Host api.groundlight.ai;

            # Forward standard headers
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host $host;
        }

    }
}
