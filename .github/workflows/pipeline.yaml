name: cicd
on: [push]

env: 
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.5.1"
  # This is the token associated with the "edge-integ-user" (with shared credentials on 1password)
  GROUNDLIGHT_API_TOKEN: ${{ secrets.GROUNDLIGHT_API_TOKEN }}
  # This is the NGINX proxy endpoint
  GROUNDLIGHT_ENDPOINT: http://localhost:6717

jobs:
  test-motion-detection:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up python
        uses: actions/setup-python@v4
        with :
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Docker 
        # moby-runc is a CLI tool for spawning and running containers according to the Open Container Initiative (OCI) 
        # specification, and it is used by the Docker runtime. The existing version of moby-runc on the GitHub Actions runner
        # is often incompatible with the version of Docker we want to install, so we need to remove it first.
        run: | 
          sudo apt-get update 
          sudo apt-get remove moby-runc 
          sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install docker-ce
      - name: Build Docker Image
        run: docker build --target production-image --tag groundlight-edge .

      - name: Create Motion Detection Config
        id: create_motion_detection_config
        run: |
          EDGE_CONFIG=$(echo "
          motion_detection:
            - detector_id: 'det_2SagpFUrs83cbMZsap5hZzRjZw4'
              enabled: true
              percentage_threshold: 5.0
              val_threshold: 50
              max_time_between_images: 30
          " | base64 -w 0)
          echo "EDGE_CONFIG=${EDGE_CONFIG}" >> $GITHUB_ENV

      - name: Start Docker Container
        id: start_container
        run: |
          container_id=$(docker run \
            -e LOG_LEVEL=DEBUG \
            -e MOTION_DETECTION_ENABLED=True \
            -e MOTION_DETECTION_MAX_TIME_BETWEEN_IMAGES=30 \
            -e GROUNDLIGHT_API_TOKEN=${{ env.GROUNDLIGHT_API_TOKEN }} \
            -e EDGE_CONFIG=${{ env.EDGE_CONFIG }} \
            -d -p 6717:6717 \
            groundlight-edge)
          echo "::set-output name=container_id::$container_id"
            
      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load Cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{hashFiles('**/poetry.lock') }}
      - name: Install package
        run: |
          poetry install --no-interaction --no-root

      - name: Run Motion Detection Tests 
        run: | 
          poetry run pytest -vs test/api/test_motdet.py
      
      - name: Dump Logs from Docker Container
        if: always()
        run: docker logs ${{ steps.start_container.outputs.container_id }}

      - name: Stop Docker Container
        # This ensures that we always stop the container regardless of the outcomes of 
        # the previous steps 
        if: always()
        run: docker stop ${{ steps.start_container.outputs.container_id }}

  # Run Groundlight SDK tests against the 
  # edge proxy endpoint set in nginx.conf file 
  # and run unit tests. 
  test-sdk-and-unit-tests:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up python 
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Docker 
        run: | 
          sudo apt-get update
          sudo apt-get remove moby-runc
          sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install docker-ce
      - name: Build Docker Image 
        run: docker build --target production-image --tag groundlight-edge .

      - name: Start Docker Container 
        id: start_container
        run: |
          container_id=$(docker run \
            -e GROUNDLIGHT_API_TOKEN=${{ env.GROUNDLIGHT_API_TOKEN }} \
            -d -p 6717:6717 \
            groundlight-edge)
          echo "::set-output name=container_id::$container_id"

      - name: Install poetry 
        uses: snok/install-poetry@v1
        with: 
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true 
          virtualenvs-in-project: true 
          installer-parallel: true 

      # Note that we're pulling the latest main from the SDK repo
      # This might be ahead of what's published to pypi, but it's useful to test things before they're released.
      - name: Checkout Groundlight SDK 
        uses: actions/checkout@v3
        with:
          repository: groundlight/python-sdk
          path: groundlight-sdk
      - name: Install Groundlight SDK dependencies
        run: |
          cd groundlight-sdk 
          poetry install 

      - name: Run Groundlight SDK tests against Edge Proxy Endpoint
        run: |
          cd groundlight-sdk 
          poetry run pytest 
          cd .. 

      - name: Load Cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{hashFiles('**/poetry.lock') }}
      - name: Install edge-endpoint's python dependencies
        run: |
          poetry install --no-interaction --no-root

      - name: Run Unit Tests
        run: | 
          poetry run pytest 
      
      - name: Dump Logs from Docker Container
        if: always()
        run: docker logs ${{ steps.start_container.outputs.container_id }}

      - name: Stop Docker Container
        # This ensures that we always stop the container regardless of the outcomes of 
        # the previous steps 
        if: always()
        run: docker stop ${{ steps.start_container.outputs.container_id }}
